"use client";

import { useState } from "react";
import { motion } from "framer-motion";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { MapPin, ArrowRight } from "lucide-react";
import { toast } from "sonner";
import { changeArea } from "@/lib/actions";
import { useWeb3 } from "@/lib/web3-client";
import { useAccount } from "wagmi";
import { useI18n } from "@/lib/i18n";

interface AreaSelectorProps {
  gameData: any;
  onAreaChange: (updatedData: any) => void;
  isProcessing: boolean;
}

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
const AREAS = {
  th: [
    {
      id: "‡∏õ‡πà‡∏≤",
      name: "‡∏õ‡πà‡∏≤",
      description: "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡πâ‡∏ô",
      color: "from-green-900 to-green-700",
      icon: "üå≤",
      level: 1,
    },
    {
      id: "‡∏ñ‡πâ‡∏≥",
      name: "‡∏ñ‡πâ‡∏≥",
      description: "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏•‡∏≤‡∏á",
      color: "from-gray-900 to-gray-700",
      icon: "üèîÔ∏è",
      level: 5,
    },
    {
      id: "‡∏ó‡∏∞‡πÄ‡∏•‡∏ó‡∏£‡∏≤‡∏¢",
      name: "‡∏ó‡∏∞‡πÄ‡∏•‡∏ó‡∏£‡∏≤‡∏¢",
      description: "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á",
      color: "from-yellow-900 to-yellow-700",
      icon: "üèúÔ∏è",
      level: 10,
    },
    {
      id: "‡∏†‡∏π‡πÄ‡∏Ç‡∏≤‡πÑ‡∏ü",
      name: "‡∏†‡∏π‡πÄ‡∏Ç‡∏≤‡πÑ‡∏ü",
      description: "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î",
      color: "from-red-900 to-red-700",
      icon: "üåã",
      level: 15,
    },
  ],
  en: [
    {
      id: "forest",
      name: "Forest",
      description: "Starter area with low-level monsters",
      color: "from-green-900 to-green-700",
      icon: "üå≤",
      level: 1,
    },
    {
      id: "cave",
      name: "Cave",
      description: "Area with mid-level monsters",
      color: "from-gray-900 to-gray-700",
      icon: "üèîÔ∏è",
      level: 5,
    },
    {
      id: "desert",
      name: "Desert",
      description: "Area with high-level monsters",
      color: "from-yellow-900 to-yellow-700",
      icon: "üèúÔ∏è",
      level: 10,
    },
    {
      id: "volcano",
      name: "Volcano",
      description: "Area with the highest level monsters",
      color: "from-red-900 to-red-700",
      icon: "üåã",
      level: 15,
    },
  ],
};

// ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
const AREA_TRANSLATION: Record<string, string> = {
  ‡∏õ‡πà‡∏≤: "forest",
  ‡∏ñ‡πâ‡∏≥: "cave",
  ‡∏ó‡∏∞‡πÄ‡∏•‡∏ó‡∏£‡∏≤‡∏¢: "desert",
  ‡∏†‡∏π‡πÄ‡∏Ç‡∏≤‡πÑ‡∏ü: "volcano",
  forest: "‡∏õ‡πà‡∏≤",
  cave: "‡∏ñ‡πâ‡∏≥",
  desert: "‡∏ó‡∏∞‡πÄ‡∏•‡∏ó‡∏£‡∏≤‡∏¢",
  volcano: "‡∏†‡∏π‡πÄ‡∏Ç‡∏≤‡πÑ‡∏ü",
};

export default function AreaSelector({
  gameData,
  onAreaChange,
  isProcessing,
}: AreaSelectorProps) {
  const { t, locale } = useI18n();
  const { address, changeArea: changeAreaContract } = useWeb3();
  const { address: wagmiAddress } = useAccount();
  const [isChangingArea, setIsChangingArea] = useState(false);

  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤
  const currentAreas = AREAS[locale as keyof typeof AREAS] || AREAS.en;
  const currentArea =
    gameData?.currentArea || (locale === "th" ? "‡∏õ‡πà‡∏≤" : "forest");

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
  const handleChangeArea = async (areaId: string) => {
    if (isProcessing || isChangingArea) return;
    if (areaId === currentArea) return;

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
    const area = currentAreas.find((a) => a.id === areaId);
    const playerLevel = Math.max(
      ...(gameData?.characters?.map((c: any) => c.level) || [1])
    );

    if (area && playerLevel < area.level) {
      toast.error(
        locale === "th" ? "‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠" : "Level not high enough",
        {
          description:
            locale === "th"
              ? `‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πÄ‡∏ß‡∏• ${area.level} ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ`
              : `You need level ${area.level} or higher`,
        }
      );
      return;
    }

    const actualAddress = address || wagmiAddress;
    if (!actualAddress) {
      toast.error(
        locale === "th"
          ? "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏Å‡πà‡∏≠‡∏ô"
          : "Please connect your wallet first",
        {
          position: "top-right",
        }
      );
      return;
    }

    setIsChangingArea(true);

    try {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô changeArea ‡∏à‡∏≤‡∏Å contract
      const contractResult = await changeAreaContract(areaId);

      if (contractResult) {
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const result = await changeArea(actualAddress, areaId);

        if (result.success) {
          toast.success(
            locale === "th"
              ? "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
              : "Area changed successfully",
            {
              description:
                locale === "th"
                  ? `‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á${areaId}‡πÅ‡∏•‡πâ‡∏ß`
                  : `You have traveled to ${areaId}`,
            }
          );
          onAreaChange(result.data);
        } else {
          toast.error(
            locale === "th" ? "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" : "Failed to change area",
            {
              description:
                result.error ||
                (locale === "th"
                  ? "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏"
                  : "Unknown error occurred"),
            }
          );
        }
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å contract ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ API ‡∏õ‡∏Å‡∏ï‡∏¥
        const result = await changeArea(actualAddress, areaId);

        if (result.success) {
          toast.success(
            locale === "th"
              ? "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
              : "Area changed successfully",
            {
              description:
                locale === "th"
                  ? `‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á${areaId}‡πÅ‡∏•‡πâ‡∏ß`
                  : `You have traveled to ${areaId}`,
            }
          );
          onAreaChange(result.data);
        } else {
          toast.error(
            locale === "th" ? "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" : "Failed to change area",
            {
              description:
                result.error ||
                (locale === "th"
                  ? "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏"
                  : "Unknown error occurred"),
            }
          );
        }
      }
    } catch (error) {
      console.error("Error changing area:", error);
      toast.error(
        locale === "th" ? "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" : "Failed to change area",
        {
          description:
            locale === "th"
              ? "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏"
              : "Unknown error occurred",
        }
      );
    } finally {
      setIsChangingArea(false);
    }
  };

  return (
    <Card className="border-purple-500/50 bg-black/40 backdrop-blur-sm">
      <CardContent className="p-4">
        <div className="flex items-center gap-2 mb-4">
          <MapPin className="h-5 w-5 text-purple-400" />
          <h2 className="text-lg font-bold">
            {locale === "th" ? "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢" : "Adventure Areas"}
          </h2>
        </div>

        <div className="space-y-3">
          {currentAreas.map((area) => {
            const isCurrentArea = area.id === currentArea;
            const isLocked =
              Math.max(
                ...(gameData?.characters?.map((c: any) => c.level) || [1])
              ) < area.level;

            return (
              <motion.div
                key={area.id}
                whileHover={{
                  scale: isLocked ? 1 : 1.02,
                }}
                className={`relative rounded-lg overflow-hidden ${
                  isLocked ? "opacity-50 cursor-not-allowed" : "cursor-pointer"
                }`}
                onClick={() => !isLocked && handleChangeArea(area.id)}
              >
                <div className={`bg-gradient-to-r ${area.color} p-3`}>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <div className="text-2xl">{area.icon}</div>
                      <div>
                        <h3 className="font-bold">{area.name}</h3>
                        <p className="text-xs text-gray-200">
                          {area.description}
                        </p>
                      </div>
                    </div>

                    {isCurrentArea ? (
                      <div className="bg-white/20 px-2 py-1 rounded-full text-xs">
                        {locale === "th" ? "‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô" : "Current"}
                      </div>
                    ) : isLocked ? (
                      <div className="flex items-center gap-1 bg-black/30 px-2 py-1 rounded-full text-xs">
                        <span>
                          {locale === "th"
                            ? `‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πÄ‡∏ß‡∏• ${area.level}`
                            : `Requires Level ${area.level}`}
                        </span>
                      </div>
                    ) : (
                      <Button
                        size="sm"
                        variant="outline"
                        className="bg-black/30 border-white/20"
                        disabled={isChangingArea || isProcessing}
                      >
                        <ArrowRight className="h-4 w-4" />
                      </Button>
                    )}
                  </div>
                </div>
              </motion.div>
            );
          })}
        </div>
      </CardContent>
    </Card>
  );
}
