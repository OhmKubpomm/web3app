"use client"

import { useState } from "react"
import { motion } from "framer-motion"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { MapPin, ArrowRight } from "lucide-react"
import { toast } from "sonner"
import { changeArea } from "@/lib/actions"

interface AreaSelectorProps {
  gameData: any
  onAreaChange: (updatedData: any) => void
  isProcessing: boolean
}

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
const AREAS = [
  {
    id: "‡∏õ‡πà‡∏≤",
    name: "‡∏õ‡πà‡∏≤",
    description: "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡πâ‡∏ô",
    color: "from-green-900 to-green-700",
    icon: "üå≤",
    level: 1,
  },
  {
    id: "‡∏ñ‡πâ‡∏≥",
    name: "‡∏ñ‡πâ‡∏≥",
    description: "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏•‡∏≤‡∏á",
    color: "from-gray-900 to-gray-700",
    icon: "üèîÔ∏è",
    level: 5,
  },
  {
    id: "‡∏ó‡∏∞‡πÄ‡∏•‡∏ó‡∏£‡∏≤‡∏¢",
    name: "‡∏ó‡∏∞‡πÄ‡∏•‡∏ó‡∏£‡∏≤‡∏¢",
    description: "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á",
    color: "from-yellow-900 to-yellow-700",
    icon: "üèúÔ∏è",
    level: 10,
  },
  {
    id: "‡∏†‡∏π‡πÄ‡∏Ç‡∏≤‡πÑ‡∏ü",
    name: "‡∏†‡∏π‡πÄ‡∏Ç‡∏≤‡πÑ‡∏ü",
    description: "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î",
    color: "from-red-900 to-red-700",
    icon: "üåã",
    level: 15,
  },
]

export default function AreaSelector({ gameData, onAreaChange, isProcessing }: AreaSelectorProps) {
  const [isChangingArea, setIsChangingArea] = useState(false)
  const currentArea = gameData?.currentArea || "‡∏õ‡πà‡∏≤"

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
  const handleChangeArea = async (areaId: string) => {
    if (isProcessing || isChangingArea) return
    if (areaId === currentArea) return

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
    const area = AREAS.find((a) => a.id === areaId)
    const playerLevel = Math.max(...(gameData?.characters?.map((c: any) => c.level) || [1]))

    if (area && playerLevel < area.level) {
      toast.error("‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠", {
        description: `‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πÄ‡∏ß‡∏• ${area.level} ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ`,
      })
      return
    }

    setIsChangingArea(true)

    try {
      const result = await changeArea(gameData.walletAddress, areaId)

      if (result.success) {
        toast.success("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", {
          description: `‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á${areaId}‡πÅ‡∏•‡πâ‡∏ß`,
        })
        onAreaChange(result.data)
      } else {
        toast.error("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", {
          description: result.error || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏",
        })
      }
    } catch (error) {
      console.error("Error changing area:", error)
      toast.error("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", {
        description: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏",
      })
    } finally {
      setIsChangingArea(false)
    }
  }

  return (
    <Card className="border-purple-500/50 bg-black/40 backdrop-blur-sm">
      <CardContent className="p-4">
        <div className="flex items-center gap-2 mb-4">
          <MapPin className="h-5 w-5 text-purple-400" />
          <h2 className="text-lg font-bold">‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢</h2>
        </div>

        <div className="space-y-3">
          {AREAS.map((area) => {
            const isCurrentArea = area.id === currentArea
            const isLocked = Math.max(...(gameData?.characters?.map((c: any) => c.level) || [1])) < area.level

            return (
              <motion.div
                key={area.id}
                whileHover={{
                  scale: isLocked ? 1 : 1.02,
                }}
                className={`relative rounded-lg overflow-hidden ${
                  isLocked ? "opacity-50 cursor-not-allowed" : "cursor-pointer"
                }`}
                onClick={() => !isLocked && handleChangeArea(area.id)}
              >
                <div className={`bg-gradient-to-r ${area.color} p-3`}>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <div className="text-2xl">{area.icon}</div>
                      <div>
                        <h3 className="font-bold">{area.name}</h3>
                        <p className="text-xs text-gray-200">{area.description}</p>
                      </div>
                    </div>

                    {isCurrentArea ? (
                      <div className="bg-white/20 px-2 py-1 rounded-full text-xs">‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</div>
                    ) : isLocked ? (
                      <div className="flex items-center gap-1 bg-black/30 px-2 py-1 rounded-full text-xs">
                        <span>‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πÄ‡∏ß‡∏• {area.level}</span>
                      </div>
                    ) : (
                      <Button
                        size="sm"
                        variant="outline"
                        className="bg-black/30 border-white/20"
                        disabled={isChangingArea || isProcessing}
                      >
                        <ArrowRight className="h-4 w-4" />
                      </Button>
                    )}
                  </div>
                </div>

                {/* Magic UI: ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà */}
                <div className="absolute inset-0 pointer-events-none">
                  {area.id === "‡∏õ‡πà‡∏≤" && (
                    <>
                      {[...Array(5)].map((_, i) => (
                        <motion.div
                          key={i}
                          initial={{
                            x: Math.random() * 100,
                            y: Math.random() * 100,
                            opacity: 0.3,
                          }}
                          animate={{
                            x: Math.random() * 100,
                            y: Math.random() * 100,
                            opacity: [0.3, 0.6, 0.3],
                          }}
                          transition={{
                            repeat: Number.POSITIVE_INFINITY,
                            duration: Math.random() * 5 + 5,
                          }}
                          className="absolute w-1 h-1 bg-green-300 rounded-full blur-sm"
                        />
                      ))}
                    </>
                  )}

                  {area.id === "‡∏ñ‡πâ‡∏≥" && (
                    <>
                      {[...Array(5)].map((_, i) => (
                        <motion.div
                          key={i}
                          initial={{
                            x: Math.random() * 100,
                            y: Math.random() * 100,
                            opacity: 0.3,
                          }}
                          animate={{
                            x: Math.random() * 100,
                            y: Math.random() * 100,
                            opacity: [0.3, 0.6, 0.3],
                          }}
                          transition={{
                            repeat: Number.POSITIVE_INFINITY,
                            duration: Math.random() * 5 + 5,
                          }}
                          className="absolute w-1 h-1 bg-blue-300 rounded-full blur-sm"
                        />
                      ))}
                    </>
                  )}

                  {area.id === "‡∏ó‡∏∞‡πÄ‡∏•‡∏ó‡∏£‡∏≤‡∏¢" && (
                    <>
                      {[...Array(5)].map((_, i) => (
                        <motion.div
                          key={i}
                          initial={{
                            x: Math.random() * 100,
                            y: Math.random() * 100,
                            opacity: 0.3,
                          }}
                          animate={{
                            x: Math.random() * 100,
                            y: Math.random() * 100,
                            opacity: [0.3, 0.6, 0.3],
                          }}
                          transition={{
                            repeat: Number.POSITIVE_INFINITY,
                            duration: Math.random() * 5 + 5,
                          }}
                          className="absolute w-1 h-1 bg-yellow-300 rounded-full blur-sm"
                        />
                      ))}
                    </>
                  )}

                  {area.id === "‡∏†‡∏π‡πÄ‡∏Ç‡∏≤‡πÑ‡∏ü" && (
                    <>
                      {[...Array(5)].map((_, i) => (
                        <motion.div
                          key={i}
                          initial={{
                            x: Math.random() * 100,
                            y: Math.random() * 100,
                            opacity: 0.3,
                          }}
                          animate={{
                            x: Math.random() * 100,
                            y: Math.random() * 100,
                            opacity: [0.3, 0.6, 0.3],
                          }}
                          transition={{
                            repeat: Number.POSITIVE_INFINITY,
                            duration: Math.random() * 5 + 5,
                          }}
                          className="absolute w-1 h-1 bg-red-300 rounded-full blur-sm"
                        />
                      ))}
                    </>
                  )}
                </div>
              </motion.div>
            )
          })}
        </div>
      </CardContent>
    </Card>
  )
}

